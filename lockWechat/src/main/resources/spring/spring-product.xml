<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/task
	http://www.springframework.org/schema/task/spring-task-3.0.xsd">

	<!--<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
		<!--<property name="location" value="classpath:jwt.properties" />-->
	<!--</bean>-->
	<!-- 自动扫描组件 -->
	<context:component-scan base-package="com.yishu.jwt" />
	<context:component-scan base-package="com.yishu.service" />
	<!--<context:component-scan base-package="com.yishu.mytask" />-->
	<context:component-scan base-package="com.yishu.util" />

	<!--javamelody与Spring集成-->
	<bean id= "facadeMonitoringAdvisor" class="net.bull.javamelody.MonitoringSpringAdvisor" >
		<property name ="pointcut" >
			<bean class="org.springframework.aop.support.JdkRegexpMethodPointcut" >
				<property name ="pattern" value="com.yishu.service.*" /><!--正则表达式-->
			</bean>
		</property>
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.yishu.dao"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>

	<!-- 创建SqlSessionFactory，同时指定数据源 -->
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean  id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="com.yishu.domain,com.yishu.pojo" />
		<property name="mapperLocations" value="classpath:mapper/*.xml" />
	</bean>

	<!-- 事务管理-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!--开启注解事务，开启之后就可以使用@Transactional注解了-->
	<!--写成<tx:annotation-driven/>时默认加载名为transactionManager的事务管理器-->
	<tx:annotation-driven/>
	<!--<tx:annotation-driven  transaction-manager="transactionManager"/>-->

	<!-- 引入配置文件 -->
	<context:property-placeholder location="classpath:properties/jdbc.properties,classpath:jwt.properties,classpath:properties/wechat.properties" />

	<!--<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
		<!--<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>-->
		<!--<property name="location" value="file:${APP_HOME}/conf/default.properties"/>-->
	<!--</bean>-->

	<!-- 数据源 org.apache.commons.dbcp.BasicDataSource com.alibaba.druid.pool.DruidDataSource -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">

		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.name}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="3" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="2" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="20000" />

		<property name="validationQuery"><value>SELECT 1</value></property>
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<!--<property name="filters" value="mergeStat" />-->
	</bean>

	<task:annotation-driven scheduler="qbScheduler" mode="proxy"/>
	<task:scheduler id="qbScheduler" pool-size="10"/>
</beans>