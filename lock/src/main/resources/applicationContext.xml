<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:task="http://www.springframework.org/schema/task"
    xmlns:p="http://www.springframework.org/schema/p"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    http://www.springframework.org/schema/task
    http://www.springframework.org/schema/task/spring-task-3.0.xsd">

    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>
    <!-- 使用Annotation自动注册Bean，在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。 -->
    <context:component-scan base-package="com.yishu">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>
    <!--<context:component-scan base-package="com.yishu" use-default-filters="false">-->
        <!--<context:include-filter type="regex" expression="com.yishu.service.*"/>-->
        <!--<context:include-filter type="regex" expression="com.yishu.aspect"/>-->
        <!--<context:include-filter type="regex" expression="com.yishu.util"/>-->
        <!--<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />-->
    <!--</context:component-scan>-->

    <!--javamelody与Spring集成-->
    <!--
    <bean id= "facadeMonitoringAdvisor" class="net.bull.javamelody.MonitoringSpringAdvisor" >
        <property name ="pointcut" >
            <bean class="org.springframework.aop.support.JdkRegexpMethodPointcut" >
                <property name ="pattern" value="com.yishu.service.*" />
            </bean>
        </property>
    </bean>
    -->

    <!-- 引入.properties配置文件 -->
    <!--<context:property-placeholder location="classpath:properties/application.properties,classpath:properties/jdbc.properties" ignore-unresolvable="true"/>-->
    <!--
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        <property name="location" value="file:${APP_HOME}/conf/default.properties"/>
    </bean>
    -->
    <bean id="propertyConfigurer" class="com.yishu.util.PropertyConfigurer">
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="locations">
            <list>
                <!--<value>classpath:properties/jdbc.properties</value>-->
                <value>classpath:properties/application.properties</value>
            </list>
        </property>
    </bean>
    <!--
    <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:jwt.properties</value>
                <value>classpath:properties/wechat.properties</value>
            </list>
        </property>
    </bean>
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="properties" ref="configProperties" />
    </bean>
    -->

    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
        <!--<property name="basePackage" value="com.yishu.dao"/>-->
        <!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 创建SqlSessionFactory，同时指定数据源 &ndash;&gt;-->
    <!--&lt;!&ndash; spring和MyBatis完美整合，不需要mybatis的配置映射文件 &ndash;&gt;-->
    <!--<bean  id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
        <!--<property name="dataSource" ref="dataSource" />-->
        <!--<property name="typeAliasesPackage" value="com.yishu.pojo" />-->
        <!--<property name="mapperLocations" value="classpath:mapper/*.xml" />-->
    <!--</bean>-->

    <!--&lt;!&ndash; 事务管理&ndash;&gt;-->
    <!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
        <!--<property name="dataSource" ref="dataSource" />-->
    <!--</bean>-->
    <!--&lt;!&ndash;开启注解事务，开启之后就可以使用@Transactional注解了&ndash;&gt;-->
    <!--&lt;!&ndash;写成<tx:annotation-driven/>时默认加载名为transactionManager的事务管理器&ndash;&gt;-->
    <!--<tx:annotation-driven/>-->
    <!--&lt;!&ndash;<tx:annotation-driven  transaction-manager="transactionManager"/>&ndash;&gt;-->

    <!--&lt;!&ndash; 数据源 org.apache.commons.dbcp.BasicDataSource com.alibaba.druid.pool.DruidDataSource &ndash;&gt;-->
    <!--<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">-->
        <!--<property name="driverClassName" value="${jdbc.driverClassName}" />-->
        <!--<property name="url" value="${jdbc.url}"/>-->
        <!--<property name="username" value="${jdbc.name}" />-->
        <!--<property name="password" value="${jdbc.password}" />-->

        <!--&lt;!&ndash; 初始化连接大小 &ndash;&gt;-->
        <!--<property name="initialSize" value="3" />-->
        <!--&lt;!&ndash; 连接池最大使用连接数量 &ndash;&gt;-->
        <!--<property name="maxActive" value="20" />-->
        <!--&lt;!&ndash; 连接池最小空闲 &ndash;&gt;-->
        <!--<property name="minIdle" value="2" />-->
        <!--&lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;-->
        <!--<property name="maxWait" value="20000" />-->

        <!--<property name="validationQuery"><value>SELECT 1</value></property>-->
        <!--<property name="testOnBorrow" value="false" />-->
        <!--<property name="testOnReturn" value="false" />-->
        <!--<property name="testWhileIdle" value="true" />-->

        <!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="60000" />-->
        <!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
        <!--<property name="minEvictableIdleTimeMillis" value="300000" />-->

        <!--&lt;!&ndash; 打开removeAbandoned功能 &ndash;&gt;-->
        <!--<property name="removeAbandoned" value="true" />-->
        <!--&lt;!&ndash; 1800秒，也就是30分钟 &ndash;&gt;-->
        <!--<property name="removeAbandonedTimeout" value="1800" />-->
        <!--&lt;!&ndash; 关闭abanded连接时输出错误日志 &ndash;&gt;-->
        <!--<property name="logAbandoned" value="true" />-->

        <!--&lt;!&ndash; 监控数据库 &ndash;&gt;-->
        <!--&lt;!&ndash; <property name="filters" value="stat" /> &ndash;&gt;-->
        <!--&lt;!&ndash;<property name="filters" value="mergeStat" />&ndash;&gt;-->
    <!--</bean>-->

    <!--<task:annotation-driven scheduler="qbScheduler" mode="proxy"/>-->
    <!--<task:scheduler id="qbScheduler" pool-size="10"/>-->
</beans>