<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
">

	<!-- 激活组件扫描功能,在包aop及其子包下面自动扫描通过注解配置的组件 -->
	<context:component-scan base-package="aop"/>
	<!-- 激活自动代理功能 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>

	<!--<aop:aspectj-autoproxy proxy-target-class="true"/>-->
	<!--<bean id="myAspect" class="aop.Aspect"/>-->
	<!--<aop:config>-->
		<!--<aop:pointcut id="pointCut" expression="execution(* service.impl.*.*(..))"/>-->
		<!--<aop:aspect ref="myAspect">-->
			<!--<aop:around method="around" pointcut-ref="pointCut"/>-->
		<!--</aop:aspect>-->
	<!--</aop:config>-->

	<context:component-scan base-package="service.impl;shiro.service.impl"/>
	<context:property-placeholder location="druid.properties"/>

	<!-- 数据源 org.apache.commons.dbcp.BasicDataSource com.alibaba.druid.pool.DruidDataSource -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">

		<property name="driverClassName" value="${driverClassName}" />
		<property name="url" value="${url}"/>
		<property name="username" value="root" />
		<property name="password" value="${password}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="2" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="1" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="20000" />

		<property name="validationQuery"><value>SELECT 1</value></property>
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<!--<property name="filters" value="mergeStat" />-->
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean  id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="model;shiro.model" />
		<property name="mapperLocations" value="classpath:mappers/*.xml" />
	</bean>

	<!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
	<!--<property name="dataSource" ref="dataSource" />-->
	<!--<property name="configLocation" value="classpath:mybatis-config.xml"></property>-->
	<!--</bean>-->

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
		<property name="basePackage" value="dao;shiro.dao"/>
	</bean>

	<!--&lt;!&ndash; 注册Mapper方式二：也可不指定特定mapper，而使用自动扫描包的方式来注册各种Mapper ，配置如下： &ndash;&gt;-->
	<!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
		<!--<property name="annotationClass" value="org.springframework.stereotype.Repository" />-->
		<!--<property name="basePackage" value="com.hi.test.mapper" />-->
		<!--<property name="sqlSessionFactory" ref="sqlSessionFactory" />-->
	<!--</bean>-->

	<!-- 配置druid监控spring jdbc -->
	<!--<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"/>-->
	<!--<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">-->
		<!--<property name="patterns">-->
			<!--<list>-->
				<!--<value>service.*</value>-->
			<!--</list>-->
		<!--</property>-->
	<!--</bean>-->
	<!--<aop:config>-->
		<!--<aop:advisor advice-ref="druid-stat-interceptor"-->
					 <!--pointcut-ref="druid-stat-pointcut" />-->
	<!--</aop:config>-->

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 声明式事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

</beans>